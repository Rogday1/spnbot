from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
import os
import re
import logging
import urllib.parse
from dotenv import load_dotenv

from src.bot.keyboards.admin import get_admin_keyboard, get_back_to_menu_keyboard
from src.bot.filters.admin import AdminFilter
from src.bot.keyboards.callback_data import AdminCallback
from src.bot.utils.env_manager import (
    add_channel_to_required, 
    get_required_channels, 
    remove_channel_from_required,
    set_max_win_per_day,
    get_max_win_per_day
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¢–û–õ–¨–ö–û –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã admin
# –í–∞–∂–Ω–æ: –∑–∞–¥–∞–µ–º –∏–º—è —Ä–æ—É—Ç–µ—Ä–∞ –∏ —è–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã admin
router = Router(name="admin_commands")

# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—É admin –æ—Ç –∞–¥–º–∏–Ω–æ–≤
@router.message(Command("admin"), AdminFilter())
async def admin_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    logging.info(f"–í—ã–∑–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        parse_mode=None,
        reply_markup=get_admin_keyboard()
    )


@router.callback_query(AdminCallback.filter(F.action == "set_max_win"), AdminFilter())
async def set_max_win_callback(callback: CallbackQuery, callback_data: AdminCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    current_max_win = get_max_win_per_day()
    
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –∑–∞ —Å—É—Ç–∫–∏: **{current_max_win}**\n\n"
        f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        f"/set_max_win 5000",
        parse_mode="Markdown",
        reply_markup=get_back_to_menu_keyboard()
    )


@router.callback_query(AdminCallback.filter(F.action == "add_channel"), AdminFilter())
async def add_channel_callback(callback: CallbackQuery, callback_data: AdminCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=AdminCallback(action="list_channels").pack()
                )
            ]
        ]
    )
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "https://t.me/test_channel\n\n"
        "–ò–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "@test_channel\n\n"
        "–ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        parse_mode=None,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–º–µ—Ç–∫–∏
        reply_markup=keyboard
    )


@router.callback_query(AdminCallback.filter(F.action == "back_to_menu"), AdminFilter())
async def back_to_menu_callback(callback: CallbackQuery, callback_data: AdminCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    await callback.answer()
    await callback.message.edit_text(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard()
    )


def extract_channel_username(url_or_username):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª.
    
    Args:
        url_or_username (str): URL –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–∞
        
    Returns:
        tuple: (username, encoded_url)
    """
    # –ï—Å–ª–∏ —ç—Ç–æ URL-–∞–¥—Ä–µ—Å —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º https://
    if url_or_username.startswith('https://t.me/'):
        username = url_or_username.split('/')[-1]
    # –ï—Å–ª–∏ —ç—Ç–æ URL-–∞–¥—Ä–µ—Å —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º t.me/
    elif url_or_username.startswith('t.me/'):
        username = url_or_username.split('/')[-1]
    # –ï—Å–ª–∏ —ç—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å @
    elif url_or_username.startswith('@'):
        username = url_or_username[1:]
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ @
    else:
        username = url_or_username
    
    encoded_url = urllib.parse.quote_plus(url_or_username)
    return username, encoded_url


@router.callback_query(AdminCallback.filter(F.action == "list_channels"), AdminFilter())
async def list_channels_callback(callback: CallbackQuery, callback_data: AdminCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    channels = get_required_channels()
    
    if not channels:
        message_text = "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."
    else:
        message_text = "–°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞–Ω–∞–ª–æ–≤
    keyboard_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    for channel in channels:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–¥–∏—Ä—É–µ–º URL –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å callback_data
        username, _ = extract_channel_username(channel)
        
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üì¢ {channel}",
                callback_data=AdminCallback(action="channel_details", value=username).pack()
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
            callback_data=AdminCallback(action="add_channel").pack()
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data=AdminCallback(action="back_to_menu").pack()
        )
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard
    )


@router.callback_query(AdminCallback.filter(F.action == "channel_details"), AdminFilter())
async def channel_details_callback(callback: CallbackQuery, callback_data: AdminCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∫–∞–Ω–∞–ª–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–∏–º"""
    await callback.answer()
    
    username = callback_data.value
    
    if not username:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞.",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
    channels = get_required_channels()
    channel_id = None
    
    # –ò—â–µ–º –∫–∞–Ω–∞–ª —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for channel in channels:
        ch_username, _ = extract_channel_username(channel)
        if ch_username == username:
            channel_id = channel
            break
    
    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º username —Å @
    if channel_id is None:
        channel_id = f"@{username}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
                    callback_data=AdminCallback(action="delete_channel", value=username).pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=AdminCallback(action="list_channels").pack()
                )
            ]
        ]
    )
    
    await callback.message.edit_text(
        f"–ö–∞–Ω–∞–ª: {channel_id}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


@router.callback_query(AdminCallback.filter(F.action == "delete_channel"), AdminFilter())
async def delete_channel_callback(callback: CallbackQuery, callback_data: AdminCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    await callback.answer()
    
    username = callback_data.value
    
    if not username:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
    channels = get_required_channels()
    channel_id = None
    
    # –ò—â–µ–º –∫–∞–Ω–∞–ª —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for channel in channels:
        ch_username, _ = extract_channel_username(channel)
        if ch_username == username:
            channel_id = channel
            break
    
    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º username —Å @
    if channel_id is None:
        channel_id = f"@{username}"
    
    # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞
    success = remove_channel_from_required(channel_id)
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels = get_required_channels()
        
        if not channels:
            message_text = "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–∞—Ö
            channels_list = "\n".join([f"‚Ä¢ {channel}" for channel in channels])
            message_text = f"–ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n\n{channels_list}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã –ö —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤",
                        callback_data=AdminCallback(action="list_channels").pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                        callback_data=AdminCallback(action="back_to_menu").pack()
                    )
                ]
            ]
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª {channel_id} –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.",
            reply_markup=get_back_to_menu_keyboard()
        )


@router.message(Command("set_max_win"), AdminFilter())
async def set_max_win_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        command_parts = message.text.split()
        if len(command_parts) != 2:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /set_max_win 5000", parse_mode=None)
            return
        
        # –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ
        try:
            max_win = int(command_parts[1])
            if max_win <= 0:
                await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", parse_mode=None)
                return
        except ValueError:
            await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.", parse_mode=None)
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
        success = set_max_win_per_day(max_win)
        
        if success:
            await message.answer(
                f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –∑–∞ —Å—É—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {max_win}",
                parse_mode=None,
                reply_markup=get_admin_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –∑–∞ —Å—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=None,
                reply_markup=get_admin_keyboard()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode=None)


@router.message(Command("add_channel"), AdminFilter())
async def add_channel_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        command_parts = message.text.split(maxsplit=2)
        if len(command_parts) != 3:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                "/add_channel @username –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n"
                "–∏–ª–∏\n"
                "/add_channel -1001234567890 –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
                parse_mode=None
            )
            return
        
        channel_id = command_parts[1]
        channel_name = command_parts[2]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
        if not (channel_id.startswith('@') or channel_id.startswith('-100')):
            await message.answer("ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @ –∏–ª–∏ -100", parse_mode=None)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        success = add_channel_to_required(channel_id, channel_name)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
            channels_list = get_required_channels()
            channels_text = '\n'.join([f"- {channel}" for channel in channels_list])
            
            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:\n\n"
                f"ID: {channel_id}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {channel_name}\n\n"
                f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n{channels_text}",
                parse_mode=None,
                reply_markup=get_admin_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                parse_mode=None,
                reply_markup=get_admin_keyboard()
            )
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode=None)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
# –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª –∏—Ö
@router.message(AdminFilter(), ~F.text.startswith('/'))
async def process_channel_link(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª
    text = message.text
    if not text:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª
    channel_id = None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ https://t.me/username
    https_pattern = r'https://t\.me/([a-zA-Z0-9_]+)'
    match_https = re.match(https_pattern, text)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ @username
    username_pattern = r'@([a-zA-Z0-9_]+)'
    match_username = re.match(username_pattern, text)
    
    if match_https:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π URL –∫–∞–∫ channel_id
        channel_id = text
    elif match_username:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º @username –∫–∞–∫ channel_id
        channel_id = text
    
    if not channel_id:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/")
        if text.startswith('/'):
            return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
            "- https://t.me/test_channel\n"
            "- @test_channel",
            parse_mode=None,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–º–µ—Ç–∫–∏
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                            callback_data=AdminCallback(action="list_channels").pack()
                        )
                    ]
                ]
            )
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    success = add_channel_to_required(channel_id)
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels_list = get_required_channels()
        
        await message.answer(
            f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:\n\n"
            f"ID: {channel_id}\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels_list)}",
            parse_mode=None,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–º–µ—Ç–∫–∏
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üìã –ö —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤",
                            callback_data=AdminCallback(action="list_channels").pack()
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                            callback_data=AdminCallback(action="back_to_menu").pack()
                        )
                    ]
                ]
            )
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
            parse_mode=None,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–º–µ—Ç–∫–∏
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                            callback_data=AdminCallback(action="list_channels").pack()
                        )
                    ]
                ]
            )
        )