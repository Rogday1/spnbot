from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
import os
import re
import logging
import urllib.parse
from dotenv import load_dotenv

from src.bot.keyboards.admin import get_admin_keyboard, get_back_to_menu_keyboard
from src.bot.filters.admin import AdminFilter
from src.bot.keyboards.callback_data import AdminCallback
from src.bot.utils.env_manager import (
    add_channel_to_required, 
    get_required_channels, 
    remove_channel_from_required,
    set_max_win_per_day,
    get_max_win_per_day
)
from src.database.repositories.prize_repository import PrizeRepository
from src.database.db import get_session
from src.config import settings

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¢–û–õ–¨–ö–û –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã admin
# –í–∞–∂–Ω–æ: –∑–∞–¥–∞–µ–º –∏–º—è —Ä–æ—É—Ç–µ—Ä–∞ –∏ —è–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã admin
router = Router(name="admin_commands")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def check_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    """
    try:
        from src.database.db import get_session
        from src.database.repositories.user_repository import UserRepository
        
        async for session in get_session():
            user_repo = UserRepository(session)
            user = await user_repo.get_user(user_id)
            return user and user.is_admin
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—É admin –æ—Ç –∞–¥–º–∏–Ω–æ–≤
@router.message(Command("admin"), AdminFilter())
async def admin_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    logging.info(f"–í—ã–∑–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        parse_mode=None,
        reply_markup=get_admin_keyboard()
    )


# –ì–õ–ê–í–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –í–°–ï–• admin callback
@router.callback_query(F.data.startswith("admin:"))
async def handle_admin_callbacks(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö admin callback"""
    logging.info(f"üéØ –ü–æ–ª—É—á–µ–Ω admin callback: data={callback.data}, user={callback.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    # –ü–∞—Ä—Å–∏–º callback data
    try:
        logging.info(f"üéØ –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: {callback.data}")
        callback_data = AdminCallback.unpack(callback.data)
        action = callback_data.action
        value = callback_data.value
        logging.info(f"üéØ –†–∞—Å–ø–∞—Ä—Å–µ–Ω callback: action={action}, value={value}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback: {e}")
        import traceback
        logging.error(traceback.format_exc())
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    logging.info(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
    if action == "set_max_win":
        await set_max_win_handler(callback)
    elif action == "manage_prizes":
        await manage_prizes_handler(callback)
    elif action == "manage_giveaways":
        await manage_giveaways_handler(callback)
    elif action == "list_giveaways":
        await list_giveaways_handler(callback)
    elif action == "create_giveaway":
        await create_giveaway_handler(callback)
    elif action == "giveaway_details":
        logging.info(f"üéØ –í—ã–∑—ã–≤–∞–µ–º giveaway_details_handler —Å value={value}")
        await giveaway_details_handler(callback, value)
    elif action == "activate_giveaway":
        await activate_giveaway_handler(callback, value)
    elif action == "finish_giveaway":
        await finish_giveaway_handler(callback, value)
    elif action == "bot_stats":
        await bot_stats_handler(callback)
    elif action == "back_to_menu":
        await back_to_menu_handler(callback)
    elif action == "add_channel":
        await add_channel_handler(callback)
    elif action == "list_channels":
        await list_channels_handler(callback)
    elif action == "list_prizes":
        await list_prizes_handler(callback)
    elif action == "prize_details":
        await prize_details_handler(callback, value)
    elif action == "toggle_prize":
        await toggle_prize_handler(callback, value)
    elif action == "setup_webapp":
        await setup_webapp_handler(callback)
    elif action == "reload_settings":
        await reload_settings_handler(callback)
    else:
        logging.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
        await callback.answer(f"‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ {action} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", show_alert=True)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def set_max_win_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    current_max_win = get_max_win_per_day()
    
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –∑–∞ —Å—É—Ç–∫–∏: **{current_max_win}**\n\n"
        f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        f"/set_max_win 5000",
        parse_mode="Markdown",
        reply_markup=get_back_to_menu_keyboard()
    )


@router.callback_query(AdminCallback.filter(F.action == "add_channel"), AdminFilter())
async def add_channel_callback(callback: CallbackQuery, callback_data: AdminCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=AdminCallback(action="list_channels").pack()
                )
            ]
        ]
    )
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "https://t.me/test_channel\n\n"
        "–ò–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "@test_channel\n\n"
        "–ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        parse_mode=None,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–º–µ—Ç–∫–∏
        reply_markup=keyboard
    )


async def back_to_menu_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    await callback.answer()
    await callback.message.edit_text(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard()
    )


async def add_channel_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await callback.answer()
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=AdminCallback(action="list_channels").pack()
            )]
        ]
    )
    
    await callback.message.edit_text(
        "üì¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞-—Å–ø–æ–Ω—Å–æ—Ä–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "`@channel_name –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞`\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "`@masha_channel –ö–∞–Ω–∞–ª –ú–∞—à–∏`\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "`/add_channel @channel_name –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞`",
        parse_mode="Markdown",
        reply_markup=keyboard
    )


async def list_channels_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    await callback.answer()
    
    try:
        async for session in get_session():
            from src.database.repositories.sponsor_channel_repository import SponsorChannelRepository
            channel_repo = SponsorChannelRepository(session)
            channels = await channel_repo.get_all_channels()
            
            if not channels:
                message_text = "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤-—Å–ø–æ–Ω—Å–æ—Ä–æ–≤\n\n–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            else:
                message_text = "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤-—Å–ø–æ–Ω—Å–æ—Ä–æ–≤\n\n"
                for channel in channels:
                    status_icon = "üü¢" if channel.is_active else "üî¥"
                    required_icon = "‚úÖ" if channel.is_required else "‚ùå"
                    message_text += f"{status_icon} {channel.channel_title}\n"
                    message_text += f"   ID: {channel.channel_id}\n"
                    message_text += f"   –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π: {required_icon}\n\n"
            
            keyboard_buttons = [
                [InlineKeyboardButton(
                    text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                    callback_data=AdminCallback(action="add_channel").pack()
                )],
                [InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=AdminCallback(action="back_to_menu").pack()
                )]
            ]
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_keyboard()
        )


async def list_prizes_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤"""
    await callback.answer()
    
    try:
        async for session in get_session():
            prize_repo = PrizeRepository(session)
            prizes = await prize_repo.get_all_prizes()
            
            if not prizes:
                message_text = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤\n\n–ü—Ä–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            else:
                message_text = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤\n\n"
                for prize in prizes:
                    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if prize.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                    message_text += f"üéÅ {prize.name}\n"
                    message_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {prize.value} —Ä—É–±\n"
                    message_text += f"üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {prize.probability*100:.1f}%\n"
                    message_text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
            
            keyboard_buttons = []
            
            for prize in prizes:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üéÅ {prize.name} ({prize.value} —Ä—É–±)",
                        callback_data=AdminCallback(action="prize_details", value=str(prize.id)).pack()
                    )
                ])
            
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=AdminCallback(action="manage_prizes").pack()
                )
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_keyboard()
        )


async def prize_details_handler(callback: CallbackQuery, prize_id_str: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏–∑–∞"""
    await callback.answer()
    
    try:
        prize_id = int(prize_id_str)
        
        async for session in get_session():
            prize_repo = PrizeRepository(session)
            prize = await prize_repo.get_prize(prize_id)
            
            if not prize:
                await callback.message.edit_text(
                    "‚ùå –ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=get_back_to_menu_keyboard()
                )
                return
            
            stats = await prize_repo.get_prize_statistics(prize_id)
            
            message_text = f"üéÅ –î–µ—Ç–∞–ª–∏ –ø—Ä–∏–∑–∞\n\n"
            message_text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {prize.name}\n"
            message_text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {prize.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            message_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {prize.value} —Ä—É–±\n"
            message_text += f"üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {prize.probability*100:.1f}%\n"
            message_text += f"üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if prize.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
            message_text += f"üìà –í—ã–∏–≥—Ä—ã—à–µ–π: {stats['wins_count']}\n"
            message_text += f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_value']} —Ä—É–±\n"
            message_text += f"üìä –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: {stats['average_value']:.1f} —Ä—É–±\n"
            
            keyboard_buttons = [
                [InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=AdminCallback(action="edit_prize", value=str(prize_id)).pack()
                )],
                [InlineKeyboardButton(
                    text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å" if prize.is_active else "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=AdminCallback(action="toggle_prize", value=str(prize_id)).pack()
                )],
                [InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=AdminCallback(action="list_prizes").pack()
                )]
            ]
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏–∑–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_keyboard()
        )


async def toggle_prize_handler(callback: CallbackQuery, prize_id_str: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞"""
    await callback.answer()
    
    try:
        prize_id = int(prize_id_str)
        
        async for session in get_session():
            prize_repo = PrizeRepository(session)
            prize = await prize_repo.get_prize(prize_id)
            
            if not prize:
                await callback.message.edit_text(
                    "‚ùå –ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=get_back_to_menu_keyboard()
                )
                return
            
            new_status = not prize.is_active
            success = await prize_repo.update_prize(prize_id, is_active=new_status)
            
            if success:
                status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                await callback.message.edit_text(
                    f"‚úÖ –ü—Ä–∏–∑ {prize.name} —É—Å–ø–µ—à–Ω–æ {status_text}!",
                    reply_markup=get_back_to_menu_keyboard()
                )
            else:
                await callback.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–∑–∞.",
                    reply_markup=get_back_to_menu_keyboard()
                )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–∑–∞.",
            reply_markup=get_back_to_menu_keyboard()
        )


def extract_channel_username(url_or_username):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª.
    
    Args:
        url_or_username (str): URL –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–∞
        
    Returns:
        tuple: (username, encoded_url)
    """
    # –ï—Å–ª–∏ —ç—Ç–æ URL-–∞–¥—Ä–µ—Å —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º https://
    if url_or_username.startswith('https://t.me/'):
        username = url_or_username.split('/')[-1]
    # –ï—Å–ª–∏ —ç—Ç–æ URL-–∞–¥—Ä–µ—Å —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º t.me/
    elif url_or_username.startswith('t.me/'):
        username = url_or_username.split('/')[-1]
    # –ï—Å–ª–∏ —ç—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å @
    elif url_or_username.startswith('@'):
        username = url_or_username[1:]
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ @
    else:
        username = url_or_username
    
    encoded_url = urllib.parse.quote_plus(url_or_username)
    return username, encoded_url


@router.callback_query(AdminCallback.filter(F.action == "list_channels"), AdminFilter())
async def list_channels_callback(callback: CallbackQuery, callback_data: AdminCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    channels = get_required_channels()
    
    if not channels:
        message_text = "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."
    else:
        message_text = "–°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞–Ω–∞–ª–æ–≤
    keyboard_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    for channel in channels:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–¥–∏—Ä—É–µ–º URL –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å callback_data
        username, _ = extract_channel_username(channel)
        
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üì¢ {channel}",
                callback_data=AdminCallback(action="channel_details", value=username).pack()
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
            callback_data=AdminCallback(action="add_channel").pack()
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data=AdminCallback(action="back_to_menu").pack()
        )
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard
    )


@router.callback_query(AdminCallback.filter(F.action == "channel_details"), AdminFilter())
async def channel_details_callback(callback: CallbackQuery, callback_data: AdminCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∫–∞–Ω–∞–ª–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–∏–º"""
    await callback.answer()
    
    username = callback_data.value
    
    if not username:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞.",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
    channels = get_required_channels()
    channel_id = None
    
    # –ò—â–µ–º –∫–∞–Ω–∞–ª —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for channel in channels:
        ch_username, _ = extract_channel_username(channel)
        if ch_username == username:
            channel_id = channel
            break
    
    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º username —Å @
    if channel_id is None:
        channel_id = f"@{username}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
                    callback_data=AdminCallback(action="delete_channel", value=username).pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=AdminCallback(action="list_channels").pack()
                )
            ]
        ]
    )
    
    await callback.message.edit_text(
        f"–ö–∞–Ω–∞–ª: {channel_id}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


@router.callback_query(AdminCallback.filter(F.action == "delete_channel"), AdminFilter())
async def delete_channel_callback(callback: CallbackQuery, callback_data: AdminCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    await callback.answer()
    
    username = callback_data.value
    
    if not username:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
    channels = get_required_channels()
    channel_id = None
    
    # –ò—â–µ–º –∫–∞–Ω–∞–ª —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for channel in channels:
        ch_username, _ = extract_channel_username(channel)
        if ch_username == username:
            channel_id = channel
            break
    
    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º username —Å @
    if channel_id is None:
        channel_id = f"@{username}"
    
    # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞
    success = remove_channel_from_required(channel_id)
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels = get_required_channels()
        
        if not channels:
            message_text = "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–∞—Ö
            channels_list = "\n".join([f"‚Ä¢ {channel}" for channel in channels])
            message_text = f"–ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n\n{channels_list}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã –ö —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤",
                        callback_data=AdminCallback(action="list_channels").pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                        callback_data=AdminCallback(action="back_to_menu").pack()
                    )
                ]
            ]
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª {channel_id} –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.",
            reply_markup=get_back_to_menu_keyboard()
        )


@router.message(Command("set_max_win"), AdminFilter())
async def set_max_win_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        command_parts = message.text.split()
        if len(command_parts) != 2:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /set_max_win 5000", parse_mode=None)
            return
        
        # –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ
        try:
            max_win = int(command_parts[1])
            if max_win <= 0:
                await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", parse_mode=None)
                return
        except ValueError:
            await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.", parse_mode=None)
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
        success = set_max_win_per_day(max_win)
        
        if success:
            await message.answer(
                f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –∑–∞ —Å—É—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {max_win}",
                parse_mode=None,
                reply_markup=get_admin_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –∑–∞ —Å—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=None,
                reply_markup=get_admin_keyboard()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode=None)


async def manage_prizes_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞–º–∏"""
    logging.info(f"üéØ –í—ã–∑–≤–∞–Ω manage_prizes_handler")
    await callback.answer()
    
    try:
        async for session in get_session():
            prize_repo = PrizeRepository(session)
            prizes = await prize_repo.get_all_prizes()
            
            if not prizes:
                message_text = "üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞–º–∏\n\n–ü—Ä–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–∏–∑!"
                keyboard_buttons = [
                    [InlineKeyboardButton(
                        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑",
                        callback_data=AdminCallback(action="add_prize").pack()
                    )],
                    [InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=AdminCallback(action="back_to_menu").pack()
                    )]
                ]
            else:
                message_text = "üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                keyboard_buttons = [
                    [InlineKeyboardButton(
                        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑",
                        callback_data=AdminCallback(action="add_prize").pack()
                    )],
                    [InlineKeyboardButton(
                        text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤",
                        callback_data=AdminCallback(action="list_prizes").pack()
                    )],
                    [InlineKeyboardButton(
                        text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–æ–≤",
                        callback_data=AdminCallback(action="prizes_stats").pack()
                    )],
                    [InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                        callback_data=AdminCallback(action="back_to_menu").pack()
                    )]
                ]
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–∑–æ–≤: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_keyboard()
        )


@router.callback_query(AdminCallback.filter(F.action == "list_prizes"), AdminFilter())
async def list_prizes_callback(callback: CallbackQuery, callback_data: AdminCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤"""
    await callback.answer()
    
    try:
        async for session in get_session():
            prize_repo = PrizeRepository(session)
            prizes = await prize_repo.get_all_prizes()
            
            if not prizes:
                message_text = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤\n\n–ü—Ä–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            else:
                message_text = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤\n\n"
                for prize in prizes:
                    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if prize.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                    message_text += f"üéÅ {prize.name}\n"
                    message_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {prize.value} —Ä—É–±\n"
                    message_text += f"üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {prize.probability*100:.1f}%\n"
                    message_text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
            
            keyboard_buttons = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–∞
            for prize in prizes:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üéÅ {prize.name} ({prize.value} —Ä—É–±)",
                        callback_data=AdminCallback(action="prize_details", value=str(prize.id)).pack()
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=AdminCallback(action="manage_prizes").pack()
                )
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_keyboard()
        )


@router.callback_query(AdminCallback.filter(F.action == "prize_details"), AdminFilter())
async def prize_details_callback(callback: CallbackQuery, callback_data: AdminCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–∑–µ"""
    await callback.answer()
    
    try:
        prize_id = int(callback_data.value)
        
        async for session in get_session():
            prize_repo = PrizeRepository(session)
            prize = await prize_repo.get_prize(prize_id)
            
            if not prize:
                await callback.message.edit_text(
                    "‚ùå –ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=get_back_to_menu_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–∑–∞
            stats = await prize_repo.get_prize_statistics(prize_id)
            
            message_text = f"üéÅ –î–µ—Ç–∞–ª–∏ –ø—Ä–∏–∑–∞\n\n"
            message_text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {prize.name}\n"
            message_text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {prize.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            message_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {prize.value} —Ä—É–±\n"
            message_text += f"üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {prize.probability*100:.1f}%\n"
            message_text += f"üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if prize.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
            message_text += f"üìà –í—ã–∏–≥—Ä—ã—à–µ–π: {stats['wins_count']}\n"
            message_text += f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_value']} —Ä—É–±\n"
            message_text += f"üìä –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: {stats['average_value']:.1f} —Ä—É–±\n"
            
            keyboard_buttons = [
                [InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=AdminCallback(action="edit_prize", value=str(prize_id)).pack()
                )],
                [InlineKeyboardButton(
                    text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å" if prize.is_active else "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=AdminCallback(action="toggle_prize", value=str(prize_id)).pack()
                )],
                [InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=AdminCallback(action="list_prizes").pack()
                )]
            ]
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏–∑–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_keyboard()
        )


@router.callback_query(AdminCallback.filter(F.action == "toggle_prize"), AdminFilter())
async def toggle_prize_callback(callback: CallbackQuery, callback_data: AdminCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞"""
    await callback.answer()
    
    try:
        prize_id = int(callback_data.value)
        
        async for session in get_session():
            prize_repo = PrizeRepository(session)
            prize = await prize_repo.get_prize(prize_id)
            
            if not prize:
                await callback.message.edit_text(
                    "‚ùå –ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=get_back_to_menu_keyboard()
                )
                return
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            new_status = not prize.is_active
            success = await prize_repo.update_prize(prize_id, is_active=new_status)
            
            if success:
                status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                await callback.message.edit_text(
                    f"‚úÖ –ü—Ä–∏–∑ {prize.name} —É—Å–ø–µ—à–Ω–æ {status_text}!",
                    reply_markup=get_back_to_menu_keyboard()
                )
            else:
                await callback.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–∑–∞.",
                    reply_markup=get_back_to_menu_keyboard()
                )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–∑–∞.",
            reply_markup=get_back_to_menu_keyboard()
        )


async def bot_stats_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    logging.info(f"üéØ bot_stats_handler –≤—ã–∑–≤–∞–Ω")
    await callback.answer()
    
    try:
        async for session in get_session():
            from src.database.repositories.user_repository import UserRepository
            from src.database.repositories.game_repository import GameRepository
            
            user_repo = UserRepository(session)
            game_repo = GameRepository(session)
            prize_repo = PrizeRepository(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            from sqlalchemy import select, func
            from src.database.models import User, Game
            
            # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            total_users_result = await session.execute(select(func.count(User.id)))
            total_users = total_users_result.scalar() or 0
            
            # –í—Å–µ–≥–æ –∏–≥—Ä
            total_games_result = await session.execute(select(func.count(Game.id)))
            total_games = total_games_result.scalar() or 0
            
            # –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–µ–π
            total_wins_result = await session.execute(
                select(func.count(Game.id)).where(Game.is_win == True)
            )
            total_wins = total_wins_result.scalar() or 0
            
            # –û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π
            total_winnings_result = await session.execute(
                select(func.sum(Game.win_amount)).where(Game.is_win == True)
            )
            total_winnings = total_winnings_result.scalar() or 0
            
            # –í—Å–µ–≥–æ –ø—Ä–∏–∑–æ–≤
            prizes = await prize_repo.get_all_prizes()
            total_prizes = len(prizes)
            active_prizes = len([p for p in prizes if p.is_active])
            
            message_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
            message_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            message_text += f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}\n"
            message_text += f"üéÅ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–µ–π: {total_wins}\n"
            message_text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π: {total_winnings} —Ä—É–±\n"
            message_text += f"üéØ –í—Å–µ–≥–æ –ø—Ä–∏–∑–æ–≤: {total_prizes}\n"
            message_text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤: {active_prizes}\n"
            
            if total_games > 0:
                win_rate = (total_wins / total_games) * 100
                message_text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π: {win_rate:.1f}%\n"
            
            await callback.message.edit_text(
                message_text,
                reply_markup=get_back_to_menu_keyboard()
            )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=get_back_to_menu_keyboard()
        )


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–û–ó–´–ì–†–´–®–ï–ô ===

async def manage_giveaways_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏"""
    logging.info(f"üéØ manage_giveaways_handler –≤—ã–∑–≤–∞–Ω")
    await callback.answer()
    
    try:
        async for session in get_session():
            from src.database.repositories.giveaway_repository import GiveawayRepository
            giveaway_repo = GiveawayRepository(session)
            giveaways = await giveaway_repo.list_all()
            
            message_text = "üéâ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            keyboard_buttons = [
                [InlineKeyboardButton(
                    text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à",
                    callback_data=AdminCallback(action="create_giveaway").pack()
                )],
                [InlineKeyboardButton(
                    text="üìã –°–ø–∏—Å–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π",
                    callback_data=AdminCallback(action="list_giveaways").pack()
                )],
                [InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=AdminCallback(action="back_to_menu").pack()
                )]
            ]
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_keyboard()
        )


async def list_giveaways_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π"""
    await callback.answer()
    
    try:
        async for session in get_session():
            from src.database.repositories.giveaway_repository import GiveawayRepository
            giveaway_repo = GiveawayRepository(session)
            giveaways = await giveaway_repo.list_all()
            
            if not giveaways:
                message_text = "üìã –°–ø–∏—Å–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π\n\n–†–æ–∑—ã–≥—Ä—ã—à–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            else:
                message_text = "üìã –°–ø–∏—Å–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π\n\n"
                for giveaway in giveaways:
                    status_emoji = "üü¢" if giveaway.status == "active" else "üü°" if giveaway.status == "draft" else "üî¥"
                    message_text += f"{status_emoji} {giveaway.title}\n"
                    message_text += f"üéÅ –ü—Ä–∏–∑: {giveaway.prize}\n"
                    message_text += f"üìä –°—Ç–∞—Ç—É—Å: {giveaway.status}\n\n"
            
            keyboard_buttons = []
            
            for giveaway in giveaways:
                status_emoji = "üü¢" if giveaway.status == "active" else "üü°" if giveaway.status == "draft" else "üî¥"
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"{status_emoji} {giveaway.title}",
                        callback_data=AdminCallback(action="giveaway_details", value=str(giveaway.id)).pack()
                    )
                ])
            
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=AdminCallback(action="manage_giveaways").pack()
                )
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_keyboard()
        )


async def create_giveaway_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "/create_giveaway \"–ù–∞–∑–≤–∞–Ω–∏–µ\" \"–û–ø–∏—Å–∞–Ω–∏–µ\" \"–ü—Ä–∏–∑\"\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "/create_giveaway \"–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à\" \"–í—ã–∏–≥—Ä–∞–π iPhone 15!\" \"iPhone 15 Pro\"",
        reply_markup=get_back_to_menu_keyboard()
    )


async def giveaway_details_handler(callback: CallbackQuery, giveaway_id_str: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    logging.info(f"üéØ giveaway_details_handler –≤—ã–∑–≤–∞–Ω —Å giveaway_id_str: {giveaway_id_str}")
    await callback.answer()
    
    try:
        if not giveaway_id_str or giveaway_id_str == "None":
            logging.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π giveaway_id_str: {giveaway_id_str}")
            await callback.message.edit_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞.",
                reply_markup=get_back_to_menu_keyboard()
            )
            return
            
        giveaway_id = int(giveaway_id_str)
        logging.info(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à ID: {giveaway_id}")
        
        async for session in get_session():
            from src.database.repositories.giveaway_repository import GiveawayRepository, GiveawayEntryRepository
            giveaway_repo = GiveawayRepository(session)
            entry_repo = GiveawayEntryRepository(session)
            giveaway = await giveaway_repo.get_by_id(giveaway_id)
            
            if not giveaway:
                await callback.message.edit_text(
                    "‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=get_back_to_menu_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            entries_count = await entry_repo.count_entries(giveaway_id)
            
            status_text = {
                "draft": "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫",
                "active": "üü¢ –ê–∫—Ç–∏–≤–µ–Ω",
                "finished": "üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω"
            }.get(giveaway.status, giveaway.status)
            
            message_text = f"üéâ –î–µ—Ç–∞–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n\n"
            message_text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {giveaway.title}\n"
            message_text += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {giveaway.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            message_text += f"üéÅ –ü—Ä–∏–∑: {giveaway.prize}\n"
            message_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
            message_text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {entries_count}\n"
            
            if giveaway.starts_at:
                message_text += f"üïê –ù–∞—á–∞–ª–æ: {giveaway.starts_at.strftime('%d.%m.%Y %H:%M')}\n"
            if giveaway.ends_at:
                message_text += f"üïê –ö–æ–Ω–µ—Ü: {giveaway.ends_at.strftime('%d.%m.%Y %H:%M')}\n"
            
            if giveaway.winner_id:
                message_text += f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {giveaway.winner_username or giveaway.winner_id}\n"
            
            keyboard_buttons = []
            
            if giveaway.status == "draft":
                keyboard_buttons.append([InlineKeyboardButton(
                    text="‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=AdminCallback(action="activate_giveaway", value=str(giveaway_id)).pack()
                )])
            elif giveaway.status == "active":
                keyboard_buttons.append([InlineKeyboardButton(
                    text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è",
                    callback_data=AdminCallback(action="finish_giveaway", value=str(giveaway_id)).pack()
                )])
            
            keyboard_buttons.append([InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=AdminCallback(action="list_giveaways").pack()
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_keyboard()
        )


async def activate_giveaway_handler(callback: CallbackQuery, giveaway_id_str: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    await callback.answer()
    
    try:
        giveaway_id = int(giveaway_id_str)
        
        async for session in get_session():
            from src.database.repositories.giveaway_repository import GiveawayRepository
            giveaway_repo = GiveawayRepository(session)
            success = await giveaway_repo.set_status(giveaway_id, "active")
            
            if success:
                await callback.message.edit_text(
                    "‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
                    reply_markup=get_back_to_menu_keyboard()
                )
            else:
                await callback.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à.",
                    reply_markup=get_back_to_menu_keyboard()
                )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.",
            reply_markup=get_back_to_menu_keyboard()
        )


async def finish_giveaway_handler(callback: CallbackQuery, giveaway_id_str: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    await callback.answer()
    
    try:
        giveaway_id = int(giveaway_id_str)
        
        async for session in get_session():
            from src.database.repositories.giveaway_repository import GiveawayRepository
            giveaway_repo = GiveawayRepository(session)
            result = await giveaway_repo.finish_and_draw(giveaway_id, winners_count=1)
            
            if result and result.get('winners'):
                winners = result['winners']
                total = result['total']
                await callback.message.edit_text(
                    f"‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                    f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å ID: {winners[0]}\n"
                    f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total}",
                    reply_markup=get_back_to_menu_keyboard()
                )
            else:
                await callback.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
                    reply_markup=get_back_to_menu_keyboard()
                )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.",
            reply_markup=get_back_to_menu_keyboard()
        )


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞–º–∏
@router.message(Command("add_prize"), AdminFilter())
async def add_prize_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞"""
    try:
        # –§–æ—Ä–º–∞—Ç: /add_prize "–ù–∞–∑–≤–∞–Ω–∏–µ" "–û–ø–∏—Å–∞–Ω–∏–µ" 1000 0.1
        command_parts = message.text.split('"')
        if len(command_parts) < 5:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                "/add_prize \"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞\" \"–û–ø–∏—Å–∞–Ω–∏–µ\" 1000 0.1\n\n"
                "–ì–¥–µ:\n"
                "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞\n"
                "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ - –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞\n"
                "‚Ä¢ 1000 - —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö\n"
                "‚Ä¢ 0.1 - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (0.0-1.0)",
                parse_mode=None
            )
            return
        
        name = command_parts[1].strip()
        description = command_parts[3].strip()
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        try:
            value_prob = command_parts[4].strip().split()
            if len(value_prob) != 2:
                raise ValueError()
            
            value = int(value_prob[0])
            probability = float(value_prob[1])
            
            if value <= 0:
                await message.answer("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", parse_mode=None)
                return
                
            if not 0.0 <= probability <= 1.0:
                await message.answer("‚ùå –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.0 –¥–æ 1.0.", parse_mode=None)
                return
                
        except (ValueError, IndexError):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏.\n"
                "–ü—Ä–∏–º–µ—Ä: /add_prize \"iPhone\" \"–ù–æ–≤—ã–π iPhone\" 50000 0.05",
                parse_mode=None
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑
        async for session in get_session():
            prize_repo = PrizeRepository(session)
            prize = await prize_repo.create_prize(
                name=name,
                description=description,
                value=value,
                probability=probability
            )
            
            await message.answer(
                f"‚úÖ –ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üéÅ –ù–∞–∑–≤–∞–Ω–∏–µ: {prize.name}\n"
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {prize.description}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {prize.value} —Ä—É–±\n"
                f"üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {prize.probability*100:.1f}%",
                parse_mode=None,
                reply_markup=get_admin_keyboard()
            )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode=None)


@router.message(Command("edit_prize"), AdminFilter())
async def edit_prize_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–∑–∞"""
    try:
        # –§–æ—Ä–º–∞—Ç: /edit_prize 1 "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" "–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ" 2000 0.2
        command_parts = message.text.split('"')
        if len(command_parts) < 5:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                "/edit_prize 1 \"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\" \"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\" 2000 0.2\n\n"
                "–ì–¥–µ 1 - ID –ø—Ä–∏–∑–∞",
                parse_mode=None
            )
            return
        
        try:
            prize_id = int(command_parts[0].split()[-1])
        except (ValueError, IndexError):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–∏–∑–∞.", parse_mode=None)
            return
        
        name = command_parts[1].strip()
        description = command_parts[3].strip()
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        try:
            value_prob = command_parts[4].strip().split()
            if len(value_prob) != 2:
                raise ValueError()
            
            value = int(value_prob[0])
            probability = float(value_prob[1])
            
            if value <= 0:
                await message.answer("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", parse_mode=None)
                return
                
            if not 0.0 <= probability <= 1.0:
                await message.answer("‚ùå –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.0 –¥–æ 1.0.", parse_mode=None)
                return
                
        except (ValueError, IndexError):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏.",
                parse_mode=None
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–∑
        async for session in get_session():
            prize_repo = PrizeRepository(session)
            success = await prize_repo.update_prize(
                prize_id=prize_id,
                name=name,
                description=description,
                value=value,
                probability=probability
            )
            
            if success:
                await message.answer(
                    f"‚úÖ –ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                    f"üéÅ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                    f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {value} —Ä—É–±\n"
                    f"üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability*100:.1f}%",
                    parse_mode=None,
                    reply_markup=get_admin_keyboard()
                )
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –ø—Ä–∏–∑–∞.",
                    parse_mode=None
                )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–∑–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode=None)


@router.message(Command("delete_prize"), AdminFilter())
async def delete_prize_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞"""
    try:
        # –§–æ—Ä–º–∞—Ç: /delete_prize 1
        command_parts = message.text.split()
        if len(command_parts) != 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /delete_prize 1\n"
                "–ì–¥–µ 1 - ID –ø—Ä–∏–∑–∞",
                parse_mode=None
            )
            return
        
        try:
            prize_id = int(command_parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–∏–∑–∞.", parse_mode=None)
            return
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–∑
        async for session in get_session():
            prize_repo = PrizeRepository(session)
            success = await prize_repo.delete_prize(prize_id)
            
            if success:
                await message.answer(
                    f"‚úÖ –ü—Ä–∏–∑ {prize_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                    parse_mode=None,
                    reply_markup=get_admin_keyboard()
                )
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –ø—Ä–∏–∑–∞.",
                    parse_mode=None
                )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode=None)

async def reload_settings_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        new_url = settings.reload_settings()
        
        await callback.message.edit_text(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n\n"
            f"üîó –ù–æ–≤—ã–π URL: {new_url}\n"
            f"üì± –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å WebApp\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ 'üåê –ù–∞—Å—Ç—Ä–æ–∏—Ç—å WebApp' –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π",
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode=None
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}",
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode=None
        )

async def setup_webapp_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebApp"""
    try:
        from aiogram import Bot
        bot = Bot(token=settings.BOT_TOKEN)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebApp URL
        webapp_url = f"{settings.WEBAPP_PUBLIC_URL}/static/game/spin_wheel.html"
        
        await bot.set_web_app_menu_button(
            menu_button={
                "type": "web_app",
                "text": "üé∞ –ò–≥—Ä–∞—Ç—å",
                "web_app": {
                    "url": webapp_url
                }
            }
        )
        
        await callback.message.edit_text(
            f"‚úÖ WebApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üîó URL: {webapp_url}\n"
            f"üì± –ö–Ω–æ–ø–∫–∞ 'üé∞ –ò–≥—Ä–∞—Ç—å' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–µ–Ω—é –±–æ—Ç–∞\n\n"
            f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É –ø—Ä—è–º–æ –∏–∑ –±–æ—Ç–∞!",
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode=None
        )
        
        await bot.session.close()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ WebApp: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ WebApp: {str(e)}",
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode=None
        )

# === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–ù–ê–õ–ê–ú–ò ===

@router.message(Command("reload_settings"))
async def reload_settings_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        new_url = settings.reload_settings()
        
        await message.answer(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n\n"
            f"üîó –ù–æ–≤—ã–π URL: {new_url}\n"
            f"üì± –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å WebApp",
            parse_mode=None
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}", parse_mode=None)

@router.message(Command("setup_webapp"))
async def setup_webapp_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebApp"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    try:
        from aiogram import Bot
        bot = Bot(token=settings.BOT_TOKEN)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebApp URL
        webapp_url = f"{settings.WEBAPP_PUBLIC_URL}/static/game/spin_wheel.html"
        
        await bot.set_web_app_menu_button(
            menu_button={
                "type": "web_app",
                "text": "üé∞ –ò–≥—Ä–∞—Ç—å",
                "web_app": {
                    "url": webapp_url
                }
            }
        )
        
        await message.answer(
            f"‚úÖ WebApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üîó URL: {webapp_url}\n"
            f"üì± –ö–Ω–æ–ø–∫–∞ 'üé∞ –ò–≥—Ä–∞—Ç—å' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–µ–Ω—é –±–æ—Ç–∞",
            parse_mode=None
        )
        
        await bot.session.close()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ WebApp: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ WebApp: {str(e)}", parse_mode=None)

@router.message(Command("add_channel"))
async def add_channel_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    try:
        # –§–æ—Ä–º–∞—Ç: /add_channel @channel_name –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        command_parts = message.text.split(' ', 2)
        if len(command_parts) < 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                "/add_channel @channel_name –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/add_channel @masha_channel –ö–∞–Ω–∞–ª –ú–∞—à–∏",
                parse_mode=None
            )
            return
        
        channel_id = command_parts[1].strip()
        channel_title = command_parts[2].strip()
        
        if not channel_id.startswith('@'):
            await message.answer("‚ùå ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @", parse_mode=None)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª
        async for session in get_session():
            from src.database.repositories.sponsor_channel_repository import SponsorChannelRepository
            channel_repo = SponsorChannelRepository(session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–∞–Ω–∞–ª
            existing_channel = await channel_repo.get_channel(channel_id)
            if existing_channel:
                await message.answer(
                    f"‚ùå –ö–∞–Ω–∞–ª {channel_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                    parse_mode=None
                )
                return
            
            channel = await channel_repo.create_channel(
                channel_id=channel_id,
                channel_title=channel_title,
                channel_url=f"https://t.me/{channel_id[1:]}",
                is_required=True,
                created_by=message.from_user.id
            )
            
            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üì¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {channel.channel_title}\n"
                f"üÜî ID: {channel.channel_id}\n"
                f"üîó URL: {channel.channel_url}\n"
                f"‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π: –î–∞",
                parse_mode=None
            )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode=None)


# === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–û–ó–´–ì–†–´–®–ê–ú–ò ===

@router.message(Command("create_giveaway"))
async def create_giveaway_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    try:
        # –§–æ—Ä–º–∞—Ç: /create_giveaway "–ù–∞–∑–≤–∞–Ω–∏–µ" "–û–ø–∏—Å–∞–Ω–∏–µ" "–ü—Ä–∏–∑"
        command_parts = message.text.split('"')
        if len(command_parts) < 6:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                "/create_giveaway \"–ù–∞–∑–≤–∞–Ω–∏–µ\" \"–û–ø–∏—Å–∞–Ω–∏–µ\" \"–ü—Ä–∏–∑\"\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/create_giveaway \"–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à\" \"–í—ã–∏–≥—Ä–∞–π iPhone!\" \"iPhone 15 Pro\"",
                parse_mode=None
            )
            return
        
        title = command_parts[1].strip()
        description = command_parts[3].strip()
        prize = command_parts[5].strip()
        
        if not title or not prize:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.", parse_mode=None)
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
        async for session in get_session():
            from src.database.repositories.giveaway_repository import GiveawayRepository
            giveaway_repo = GiveawayRepository(session)
            giveaway = await giveaway_repo.create(
                title=title,
                description=description,
                prize=prize,
                created_by=message.from_user.id
            )
            
            await message.answer(
                f"‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üéâ –ù–∞–∑–≤–∞–Ω–∏–µ: {giveaway.title}\n"
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {giveaway.description}\n"
                f"üéÅ –ü—Ä–∏–∑: {giveaway.prize}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: –ß–µ—Ä–Ω–æ–≤–∏–∫\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
                parse_mode=None,
                reply_markup=get_back_to_menu_keyboard()
            )
            break
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode=None)


@router.message(Command("add_channel"), AdminFilter())
async def add_channel_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        command_parts = message.text.split(maxsplit=2)
        if len(command_parts) != 3:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                "/add_channel @username –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n"
                "–∏–ª–∏\n"
                "/add_channel -1001234567890 –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
                parse_mode=None
            )
            return
        
        channel_id = command_parts[1]
        channel_name = command_parts[2]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
        if not (channel_id.startswith('@') or channel_id.startswith('-100')):
            await message.answer("ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @ –∏–ª–∏ -100", parse_mode=None)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        success = add_channel_to_required(channel_id, channel_name)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
            channels_list = get_required_channels()
            channels_text = '\n'.join([f"- {channel}" for channel in channels_list])
            
            await message.answer(
                f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:\n\n"
                f"ID: {channel_id}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {channel_name}\n\n"
                f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n{channels_text}",
                parse_mode=None,
                reply_markup=get_admin_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                parse_mode=None,
                reply_markup=get_admin_keyboard()
            )
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode=None)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
# –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª –∏—Ö
@router.message(AdminFilter(), ~F.text.startswith('/'))
async def process_channel_link(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª
    text = message.text
    if not text:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª
    channel_id = None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ https://t.me/username
    https_pattern = r'https://t\.me/([a-zA-Z0-9_]+)'
    match_https = re.match(https_pattern, text)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ @username
    username_pattern = r'@([a-zA-Z0-9_]+)'
    match_username = re.match(username_pattern, text)
    
    if match_https:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π URL –∫–∞–∫ channel_id
        channel_id = text
    elif match_username:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º @username –∫–∞–∫ channel_id
        channel_id = text
    
    if not channel_id:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/")
        if text.startswith('/'):
            return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
            "- https://t.me/test_channel\n"
            "- @test_channel",
            parse_mode=None,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–º–µ—Ç–∫–∏
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                            callback_data=AdminCallback(action="list_channels").pack()
                        )
                    ]
                ]
            )
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    success = add_channel_to_required(channel_id)
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels_list = get_required_channels()
        
        await message.answer(
            f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:\n\n"
            f"ID: {channel_id}\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels_list)}",
            parse_mode=None,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–º–µ—Ç–∫–∏
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üìã –ö —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤",
                            callback_data=AdminCallback(action="list_channels").pack()
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                            callback_data=AdminCallback(action="back_to_menu").pack()
                        )
                    ]
                ]
            )
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
            parse_mode=None,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–º–µ—Ç–∫–∏
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                            callback_data=AdminCallback(action="list_channels").pack()
                        )
                    ]
                ]
            )
        )

